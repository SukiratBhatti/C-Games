#include <iostream>
#include <string_view>
#include <vector>
#include "Random.h"

namespace WordList
{
    // Define word bank
    std::vector<std::string_view> words { "naruto", "osaka" , "airline", "cornell", "arcane", "revolutionary", "beautiful", "intelligence", "circumlocutions" };

    // select random word
    std::string_view getRandomWord()
    {
        return words[Random::get<std::size_t>(0, words.size()-1)];
    }
}

class Session
{
private:
    // create word, set letters to false
    std::string_view m_word { WordList::getRandomWord() };
    bool m_guessed[26]{};

public:
    std::string_view getWord() const { return m_word; }

    // set guess to true
    void registerGuess(char letter) {
        m_guessed[letter - 'a'] = true;
    }
    
    // Check if a letter has been guessed
    bool isGuessed(char letter) const {
        return m_guessed[letter - 'a'];
    }
    
    // Check if a letter is in the word
    bool containsLetter(char letter) const {
        for (char c : m_word) {
            if (c == letter) return true;
        }
        return false;
    }

    // check if word has been gussed
    bool isWordGuessed(){
        for(char c: m_word){
            if(!isGuessed(c)){
                return false;
            }
        }
        return true;
    }

    // check if guess was incorrect
    void incorrectGuess(){
        for(char c{'a'}; c <= 'z'; ++c){
            if(isGuessed(c) && !containsLetter(c)){
                std::cout << c << " ";
            }
        }
        std::cout << '\n';
    }
};

void draw(const Session& s)
{
    std::cout << '\n';

    std::cout << "The word: ";
    for (char c: s.getWord()) 
    {
        if (s.isGuessed(c)){
            std::cout << c;
        } else {
            std::cout << '_';
        }
    }
    std::cout << '\n';
}

char getGuess(const Session& s)
{
    while (true)
    {
        std::cout << "Enter your next letter: ";

        char c{};
        std::cin >> c;

        // If user did something bad, try again
        if (!std::cin)
        {
            // Fix it
            std::cin.clear();
            std::cout << "That wasn't a valid input.  Try again.\n";
            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
            continue;
        }
        if (s.isGuessed(c)){
            std::cout<<"You already guessed that.\n";
            continue;
        }

        // Clear out any extraneous input
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

        // If the user entered an invalid char, try again
        if (c < 'a' || c > 'z')
        {
            std::cout << "That wasn't a valid input.  Try again.\n";
            continue;
        }
        return c;
    }
}

int main()
{
    std::cout << "Welcome to C++man (a variant of Hangman)\n";
    std::cout << "To win: guess the word.  To lose: run out of pluses.\n";

    Session s{};

    int guesses{7};
    bool gameover{false};
    while (!gameover){
        draw(s);
        s.incorrectGuess();
        std::cout << "Wrong guesses remaining: " << guesses << '\n';

        if (s.isWordGuessed()){
            std::cout << "You win!";
            gameover = true;
            break;
        }

        if (guesses == 0){
            std::cout << "7 lives lost!\n";
            std::cout << "The word was " << s.getWord() << '\n';
            gameover = true;
            break;
        }

        char c{getGuess(s)};
        s.registerGuess(c);
        
        if(!s.containsLetter(c)){
            std::cout<<"Incorrect guess!\n";
            --guesses;
        }
    }
    return 0;
}
