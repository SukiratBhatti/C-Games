// this is a super scuffed version of Dungeon Hero. Nonetheless, I really enjoyed programming it.

#include <iostream>
#include <string>
#include <string_view>
#include "Random.h"

class Creature{
protected:
	std::string m_name{};
	char m_symbol{};
	int m_health{}, m_damage{}, m_gold{};
public:
	Creature(std::string_view name, char symbol, int health, int damage, int gold)
	: m_name { name }, m_symbol { symbol }, m_health { health }, m_damage { damage }, m_gold { gold }
	{
	}
	const std::string& getName()const {return m_name;}
    char getSymbol() const { return m_symbol; }
    int getHealth() const { return m_health; }
    int getDamage() const { return m_damage; }
    int getGold() const { return m_gold; }

	void reduceHealth(int damage){m_health -= damage;}
	bool isDead(){return(m_health <= 0);}
	void addGold(int amount){m_gold+=amount;}
};


class Player : public Creature{
private:
	int m_level{1};
public:
	Player(std::string_view name)
		: Creature{name, '@', 10, 1, 0}
		{
		}

	void levelUp(){
		++m_level;
		++m_damage;
	};
	int getLevel()const {return m_level;}
	bool hasWon(){return(m_level==20);}
} ;

class Monster : public Creature{
public:
enum Type{
	dragon,
	orc,
	slime,
	max_types,
};
	
	static inline Creature monsterData[]
	{
		// type, char, health, damage, gold
		{ "dragon", 'D', 20, 4, 100 },
		{ "orc",    'o',  4, 2,  25 },
		{ "slime",  's',  1, 1,  10 }
	};


	Monster(Type type)
		: Creature{monsterData[type]}
		{
		}

	static Monster getRandomMonster(){
		int num = Random::get(0, max_types-1);
		return Monster{static_cast<Type>(num)};
	}

};

class Potion {
public:

	enum Type{
		health,
		strength,
		poison,
		max_types,
	};

	enum Effect{
		small,
		medium, 
		large,
		mythical,
		max_effects,
	};
		Potion(Type type, Effect effect)
			:m_type{type}, m_effect{effect}
			{
			}

		Type getType() const { return m_type; }
		Effect getEffect() const { return m_effect; }

		static Potion getRandomPotion()
		{
			Type type{ static_cast<Type>(Random::get(0, static_cast<int>(Type::max_types) - 1)) };
			Effect size{ static_cast<Effect>(Random::get(0, static_cast<int>(Effect::max_effects) - 1)) };
			return Potion{type, size};
		}

private:
	Type m_type;
	Effect m_effect;

};

void applyPotion(Player& player, const Potion& potion){
    using Type = Potion::Type;
	using Effect = Potion::Effect;

    // Apply effect based on potion type
    switch (potion.getType())
    {
        case Type::health:
            if (potion.getEffect() == Effect::large)
                player.reduceHealth(-5); // Gain 5 health
            else
                player.reduceHealth(-2); // Gain 2 health
            std::cout << "You gained health!\n";
            break;

        case Type::strength:
            player.levelUp(); // Simple way to simulate strength = +1 damage
            std::cout << "You gained strength!\n";
            break;

        case Type::poison:
            player.reduceHealth(1); // Lose health
            std::cout << "You were poisoned!\n";
            break;
    }
}

void attackMonster(Player& p, Monster& m)
{
    std::cout << "You hit the " << m.getName() << " for " << p.getDamage() << " damage.\n";
    m.reduceHealth(p.getDamage());

    if (m.isDead())
    {
        std::cout << "You killed the " << m.getName() << '\n';
        p.levelUp();
        p.addGold(m.getGold());
        std::cout << "You found " << m.getGold() << " gold\n";
        std::cout << "You are now level " << p.getLevel() << '\n';

        // POTION SECTION (new)
        if (Random::get(1, 100) <= 30) // 30% chance
        {
            std::cout << "You found a mythical potion! Do you want to drink it? [y/n]: ";
            char drink{};
            std::cin >> drink;
            drink = std::tolower(drink);

            if (drink == 'y')
            {
                Potion potion{ Potion::getRandomPotion() };

                // Announce potion
                switch (potion.getEffect())
                {
                    case Potion::small: std::cout << "You drank a Small "; break;
                    case Potion::medium: std::cout << "You drank a Medium "; break;
                    case Potion::large: std::cout << "You drank a Large "; break;
                    case Potion::mythical: std::cout << "You drank a Mythical "; break;
                    default: break;
                }

                switch (potion.getType())
                {
                    case Potion::health: std::cout << "potion of Health.\n"; break;
                    case Potion::strength: std::cout << "potion of Strength.\n"; break;
                    case Potion::poison: std::cout << "potion of Poison.\n"; break;
                    default: break;
                }

                applyPotion(p, potion);
            }
            else
            {
                std::cout << "You chose not to drink the potion.\n";
            }
        }
    }
}


void attackPlayer(Player& p, Monster& m){
	std::cout << "The " << m.getName() << " hit you for " << m.getDamage() << '\n';
	p.reduceHealth(m.getDamage());

}

void fightMonster(Player& player, Monster& monster)
{
    while (!monster.isDead() && !player.isDead())
    {
        std::cout << "(R)un or (F)ight: ";
        char choice{};
        std::cin >> choice;
        choice = std::tolower(choice);

        if (choice == 'r')
        {
            if (Random::get(0, 1))
            {
                std::cout << "You successfully fled.\n";
                return; // Flee ends encounter
            }
            else
            {
                std::cout << "You failed to flee.\n";
                attackPlayer(player, monster);
            }
        }
        else if (choice == 'f')
        {
            attackMonster(player, monster);

            if (!monster.isDead())
                attackPlayer(player, monster);
        }
    }
}

void gameLoop(Player& player)
{
    while (!player.isDead() && !player.hasWon())
    {
        Monster monster{ Monster::getRandomMonster() };
        std::cout << "You have encountered a " << monster.getName() << " (" << monster.getSymbol() << ").\n";

        fightMonster(player, monster);
    }

    if (player.isDead())
        std::cout << "You died at level " << player.getLevel() << " with " << player.getGold() << " gold.\n";
    else
        std::cout << "You won with " << player.getGold() << " gold!\n";
}


int main()
{
	std::cout << "Enter your name: ";
	std::string playerName;
	std::cin >> playerName;

	Player p{ playerName };
	std::cout << "Welcome, " << p.getName() << ".\n";

	gameLoop(p);

	return 0;
}

	gameLoop(p);

	return 0;
}
