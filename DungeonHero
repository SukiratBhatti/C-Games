// this is a super scuffed version of Dungeon Hero. Nonetheless, I really enjoyed programming it.

#include <iostream>
#include <string>
#include <string_view>
#include "Random.h"

class Creature{
protected:
	std::string m_name{};
	char m_symbol{};
	int m_health{}, m_damage{}, m_gold{};
public:
	Creature(std::string_view name, char symbol, int health, int damage, int gold)
	: m_name { name }, m_symbol { symbol }, m_health { health }, m_damage { damage }, m_gold { gold }
	{
	}
	const std::string& getName()const {return m_name;}
    char getSymbol() const { return m_symbol; }
    int getHealth() const { return m_health; }
    int getDamage() const { return m_damage; }
    int getGold() const { return m_gold; }

	void reduceHealth(int damage){m_health -= damage;}
	bool isDead(){return(m_health <= 0);}
	void addGold(int amount){m_gold+=amount;}
};


class Player : public Creature{
private:
	int m_level{1};
public:
	Player(std::string_view name)
		: Creature{name, '@', 10, 1, 0}
		{
		}

	void levelUp(){
		++m_level;
		++m_damage;
	};
	int getLevel()const {return m_level;}
	bool hasWon(){return(m_level==20);}
} ;

class Monster : public Creature{
public:
enum Type{
	dragon,
	orc,
	slime,
	max_types,
};
	
	static inline Creature monsterData[]
	{
		// type, char, health, damage, gold
		{ "dragon", 'D', 20, 4, 100 },
		{ "orc",    'o',  4, 2,  25 },
		{ "slime",  's',  1, 1,  10 }
	};


	Monster(Type type)
		: Creature{monsterData[type]}
		{
		}

	static Monster getRandomMonster(){
		int num = Random::get(0, max_types-1);
		return Monster{static_cast<Type>(num)};
	}

};

void attackMonster(Player& p, Monster& m){
	std::cout << "You hit the " << m.getName() << " for " << p.getDamage() << " damage.\n";
			m.reduceHealth(p.getDamage());
			if (m.isDead()){
				std::cout << "You killed the " << m.getName() << '\n';
				p.levelUp();
				p.addGold(m.getGold());
				std::cout << "You have encountered " << m.getGold() << " gold\n";
				std::cout << "You are now level " << p.getLevel() << '\n';
	}
}

void attackPlayer(Player& p, Monster& m){
	std::cout << "The " << m.getName() << " hit you for " << m.getDamage() << '\n';
	p.reduceHealth(m.getDamage());

}

void fightMonster(Player& player, Monster& monster)
{
    while (!monster.isDead() && !player.isDead())
    {
        std::cout << "(R)un or (F)ight: ";
        char choice{};
        std::cin >> choice;
        choice = std::tolower(choice);

        if (choice == 'r')
        {
            if (Random::get(0, 1))
            {
                std::cout << "You successfully fled.\n";
                return; // Flee ends encounter
            }
            else
            {
                std::cout << "You failed to flee.\n";
                attackPlayer(player, monster);
            }
        }
        else if (choice == 'f')
        {
            attackMonster(player, monster);

            if (!monster.isDead())
                attackPlayer(player, monster);
        }
    }
}

void gameLoop(Player& player)
{
    while (!player.isDead() && !player.hasWon())
    {
        Monster monster{ Monster::getRandomMonster() };
        std::cout << "You have encountered a " << monster.getName() << " (" << monster.getSymbol() << ").\n";

        fightMonster(player, monster);
    }

    if (player.isDead())
        std::cout << "You died at level " << player.getLevel() << " with " << player.getGold() << " gold.\n";
    else
        std::cout << "You won with " << player.getGold() << " gold!\n";
}


int main()
{
	std::cout << "Enter your name: ";
	std::string playerName;
	std::cin >> playerName;

	Player p{ playerName };
	std::cout << "Welcome, " << p.getName() << ".\n";

	gameLoop(p);

	return 0;
}
